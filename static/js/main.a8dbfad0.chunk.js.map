{"version":3,"sources":["components/BotMessage.jsx","components/UserMessage.jsx","components/Messages.jsx","components/Input.jsx","ChatbotAPI.js","components/Header.jsx","index.js"],"names":["BotMessage","_ref","fetchMessage","isLoading","setLoading","useState","message","setMessage","useEffect","async","msg","loadMessage","React","createElement","className","UserMessage","text","Messages","messages","el","useRef","current","scrollIntoView","block","behavior","id","ref","Input","onSend","setText","onSubmit","e","preventDefault","type","onChange","target","value","placeholder","version","xmlns","width","height","viewBox","points","API","GetChatbotResponse","body","action","payload","userInput","response","fetch","concat","method","headers","Authorization","Content-Type","JSON","stringify","json","map","join","error","console","Header","Chatbot","setMessages","key","loadWelcomeMessage","newMessages","length","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oIAEe,SAASA,EAAUC,GAAmB,IAAlBC,aAAEA,GAAcD,EACjD,MAAOE,EAAWC,GAAcC,oBAAS,IAClCC,EAASC,GAAcF,mBAAS,IAWvC,OATAG,oBAAU,MACRC,iBACE,MAAMC,QAAYR,IAClBE,GAAW,GACXG,EAAWG,GAEbC,IACC,CAACT,IAGFU,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,OAAKC,UAAU,eAAeX,EAAY,MAAQG,ICfzC,SAASS,EAAWd,GAAW,IAAVe,KAAEA,GAAMf,EAC1C,OACEW,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,OAAKC,UAAU,gBAAgBE,ICHtB,SAASC,EAAQhB,GAAe,IAAdiB,SAAEA,GAAUjB,EAC3C,MAAMkB,EAAKC,iBAAO,MAIlB,OAHAZ,oBAAU,KACRW,EAAGE,QAAQC,eAAe,CAAEC,MAAO,MAAOC,SAAU,aAGpDZ,IAAAC,cAAA,OAAKC,UAAU,YACZI,EACDN,IAAAC,cAAA,OAAKY,GAAI,KAAMC,IAAKP,KCRX,SAASQ,EAAK1B,GAAa,IAAZ2B,OAAEA,GAAQ3B,EACtC,MAAOe,EAAMa,GAAWxB,mBAAS,IAYjC,OACEO,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,QAAMiB,SARSC,IACjBA,EAAEC,iBACFJ,EAAOZ,GACPa,EAAQ,MAMJjB,IAAAC,cAAA,SACEoB,KAAK,OACLC,SAfkBH,IACxBF,EAAQE,EAAEI,OAAOC,QAeXA,MAAOpB,EACPqB,YAAY,4BAEdzB,IAAAC,cAAA,cACED,IAAAC,cAAA,OACEyB,QAAQ,MACRC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,eAER9B,IAAAC,cAAA,SACED,IAAAC,cAAA,SACED,IAAAC,cAAA,WAAS8B,OAAO,uECAjBC,MAhCH,CACVC,mBAAoBpC,UAClB,MAGMqC,EAAO,CACXC,OAAQ,CACNd,KAAM,OACNe,QAASC,IAIb,IACE,MAAMC,QAAiBC,MAAK,oDAAAC,OAVf,WAU0E,aAAa,CAClGC,OAAQ,OACRC,QAAS,CACPC,cAdS,kDAeTC,eAAgB,oBAElBV,KAAMW,KAAKC,UAAUZ,KAKvB,aAFmBI,EAASS,QAEhBzC,SAAS0C,IAAIlD,GAAOA,EAAIsC,QAAQ1C,SAASuD,KAAK,MAC1D,MAAOC,GAEP,OADAC,QAAQD,MAAM,oCAAqCA,GAC5C,6CC3BE,SAASE,IACtB,OAAOpD,IAAAC,cAAA,OAAKC,UAAU,UAAS,mCCUjC,SAASmD,IACP,MAAO/C,EAAUgD,GAAe7D,mBAAS,IAEzCG,oBAAU,MACRC,iBACEyD,EAAY,CACVtD,IAAAC,cAACb,EAAU,CACTmE,IAAI,IACJjE,aAAcO,eAAkBmC,EAAIC,mBAAmB,UAI7DuB,IACC,IAaH,OACExD,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAACmD,EAAM,MACPpD,IAAAC,cAACI,EAAQ,CAACC,SAAUA,IACpBN,IAAAC,cAACc,EAAK,CAACC,OAfEnB,UACX,MAAM4D,EAAcnD,EAASkC,OAC3BxC,IAAAC,cAACE,EAAW,CAACoD,IAAKjD,EAASoD,OAAS,EAAGtD,KAAMA,IAC7CJ,IAAAC,cAACb,EAAU,CACTmE,IAAKjD,EAASoD,OAAS,EACvBpE,aAAcO,eAAkBmC,EAAIC,mBAAmB7B,MAG3DkD,EAAYG,OAYhB,MAAME,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO/D,IAAAC,cAACoD,EAAO,MAAKM","file":"static/js/main.a8dbfad0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function BotMessage({ fetchMessage }) {\n  const [isLoading, setLoading] = useState(true);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    async function loadMessage() {\n      const msg = await fetchMessage();\n      setLoading(false);\n      setMessage(msg);\n    }\n    loadMessage();\n  }, [fetchMessage]);\n\n  return (\n    <div className=\"message-container\">\n      <div className=\"bot-message\">{isLoading ? \"...\" : message}</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function UserMessage({ text }) {\n  return (\n    <div className=\"message-container\">\n      <div className=\"user-message\">{text}</div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nexport default function Messages({ messages }) {\n  const el = useRef(null);\n  useEffect(() => {\n    el.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n  });\n  return (\n    <div className=\"messages\">\n      {messages}\n      <div id={\"el\"} ref={el} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\nexport default function Input({ onSend }) {\n  const [text, setText] = useState(\"\");\n\n  const handleInputChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleSend = e => {\n    e.preventDefault();\n    onSend(text);\n    setText(\"\");\n  };\n\n  return (\n    <div className=\"input\">\n      <form onSubmit={handleSend}>\n        <input\n          type=\"text\"\n          onChange={handleInputChange}\n          value={text}\n          placeholder=\"Enter your message here\"\n        />\n        <button>\n          <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 500 500\"\n          >\n            <g>\n              <g>\n                <polygon points=\"0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75\" />\n              </g>\n            </g>\n          </svg>\n        </button>\n      </form>\n    </div>\n  );\n}\n","// ChatbotAPI.js\n\nconst API = {\n  GetChatbotResponse: async (userInput) => {\n    const apiKey = 'VF.DM.65c08beadf941b23162ce45f.4dtobjTFKLMWtaVQ'; // Your Voiceflow API key\n    const userID = 'user_123'; // Unique ID used to track conversation state\n\n    const body = {\n      action: {\n        type: 'text',\n        payload: userInput,\n      },\n    };\n\n    try {\n      const response = await fetch(`https://general-runtime.voiceflow.com/state/user/${userID}/interact`, {\n        method: 'POST',\n        headers: {\n          'Authorization': apiKey,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n\n      const data = await response.json();\n      // Assuming the response contains a messages array with text content. Adjust according to your Voiceflow project's actual response structure.\n      return data.messages.map(msg => msg.payload.message).join('\\n');\n    } catch (error) {\n      console.error('Error interacting with Voiceflow:', error);\n      return \"Sorry, I couldn't understand that.\";\n    }\n  }\n};\n\nexport default API;\n","import React from \"react\";\n\nexport default function Header() {\n  return <div className=\"header\">&nbsp;Juno, Your Cool Event Guide</div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport BotMessage from \"./components/BotMessage\";\nimport UserMessage from \"./components/UserMessage\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\n\nimport API from \"./ChatbotAPI\";\n\nimport \"./styles.css\";\nimport Header from \"./components/Header\";\n\nfunction Chatbot() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      setMessages([\n        <BotMessage\n          key=\"0\"\n          fetchMessage={async () => await API.GetChatbotResponse(\"hi\")}\n        />\n      ]);\n    }\n    loadWelcomeMessage();\n  }, []);\n\n  const send = async text => {\n    const newMessages = messages.concat(\n      <UserMessage key={messages.length + 1} text={text} />,\n      <BotMessage\n        key={messages.length + 2}\n        fetchMessage={async () => await API.GetChatbotResponse(text)}\n      />\n    );\n    setMessages(newMessages);\n  };\n\n  return (\n    <div className=\"chatbot\">\n      <Header />\n      <Messages messages={messages} />\n      <Input onSend={send} />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Chatbot />, rootElement);\n"],"sourceRoot":""}